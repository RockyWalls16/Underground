package com.thva.underground.world.biomes.provider;

import com.thva.underground.world.biomes.UGBiomes;

import net.minecraft.world.biome.Biome;
import net.minecraft.world.gen.layer.GenLayer;
import net.minecraft.world.gen.layer.GenLayerEdge;
import net.minecraft.world.gen.layer.IntCache;

public class GenLayerUgEdge extends GenLayer
{
    private final GenLayerUgEdge.Mode mode;

    public GenLayerUgEdge(long seed, GenLayer parent, GenLayerUgEdge.Mode mode)
    {
        super(seed);
        this.parent = parent;
        this.mode = mode;
    }

    /**
     * Returns a list of integer values generated by this layer. These may be interpreted as temperatures, rainfall
     * amounts, or biomeList[] indices based on the particular GenLayer subclass.
     */
    public int[] getInts(int areaX, int areaY, int areaWidth, int areaHeight)
    {
        switch (this.mode)
        {
            case COOL_WARM:
            default:
                return this.getIntsCoolWarm(areaX, areaY, areaWidth, areaHeight);
            case HEAT_ICE:
                return this.getIntsHeatIce(areaX, areaY, areaWidth, areaHeight);
        }
    }

    private int[] getIntsCoolWarm(int areaX, int areaY, int areaWidth, int areaHeight)
    {
    	int fieldId = Biome.getIdForBiome(UGBiomes.UNDERGROUND_FIELD);
    	int forestId = Biome.getIdForBiome(UGBiomes.UNDERGROUND_FOREST);
    	int fridgeId = Biome.getIdForBiome(UGBiomes.UNDERGROUND_FRIDGE);
    	int volcanoId = Biome.getIdForBiome(UGBiomes.UNDERGROUND_VOLCANO);
    	
        int i = areaX - 1;
        int j = areaY - 1;
        int k = 1 + areaWidth + 1;
        int l = 1 + areaHeight + 1;
        int[] aint = this.parent.getInts(i, j, k, l);
        int[] aint1 = IntCache.getIntCache(areaWidth * areaHeight);

        for (int i1 = 0; i1 < areaHeight; ++i1)
        {
            for (int j1 = 0; j1 < areaWidth; ++j1)
            {
                this.initChunkSeed((long)(j1 + areaX), (long)(i1 + areaY));
                int k1 = aint[j1 + 1 + (i1 + 1) * k];

                if (k1 == fieldId)
                {
                    int l1 = aint[j1 + 1 + (i1 + 1 - 1) * k];
                    int i2 = aint[j1 + 1 + 1 + (i1 + 1) * k];
                    int j2 = aint[j1 + 1 - 1 + (i1 + 1) * k];
                    int k2 = aint[j1 + 1 + (i1 + 1 + 1) * k];
                    boolean isFridge = l1 == fridgeId || i2 == fridgeId || j2 == fridgeId || k2 == fridgeId;
                    boolean isForest = l1 == forestId || i2 == forestId || j2 == forestId || k2 == forestId;

                    if (isFridge || isForest)
                    {
                        k1 = volcanoId;
                    }
                }

                aint1[j1 + i1 * areaWidth] = k1;
            }
        }

        return aint1;
    }

    private int[] getIntsHeatIce(int areaX, int areaY, int areaWidth, int areaHeight)
    {
    	int plainsId = Biome.getIdForBiome(UGBiomes.UNDERGROUND_PLAINS);
    	int fieldId = Biome.getIdForBiome(UGBiomes.UNDERGROUND_FIELD);
    	int forestId = Biome.getIdForBiome(UGBiomes.UNDERGROUND_FOREST);
    	int fridgeId = Biome.getIdForBiome(UGBiomes.UNDERGROUND_FRIDGE);
    	int volcanoId = Biome.getIdForBiome(UGBiomes.UNDERGROUND_VOLCANO);
    	
        int i = areaX - 1;
        int j = areaY - 1;
        int k = 1 + areaWidth + 1;
        int l = 1 + areaHeight + 1;
        int[] aint = this.parent.getInts(i, j, k, l);
        int[] aint1 = IntCache.getIntCache(areaWidth * areaHeight);

        for (int i1 = 0; i1 < areaHeight; ++i1)
        {
            for (int j1 = 0; j1 < areaWidth; ++j1)
            {
                int k1 = aint[j1 + 1 + (i1 + 1) * k];

                if (k1 == forestId)
                {
                    int l1 = aint[j1 + 1 + (i1 + 1 - 1) * k];
                    int i2 = aint[j1 + 1 + 1 + (i1 + 1) * k];
                    int j2 = aint[j1 + 1 - 1 + (i1 + 1) * k];
                    int k2 = aint[j1 + 1 + (i1 + 1 + 1) * k];
                    boolean isVolcano = l1 == volcanoId || i2 == volcanoId || j2 == volcanoId || k2 == volcanoId;
                    boolean isFridge = l1 == fieldId || i2 == fieldId || j2 == fieldId || k2 == fieldId;

                    if (isFridge || isVolcano)
                    {
                        k1 = fridgeId;
                    }
                }

                aint1[j1 + i1 * areaWidth] = k1;
            }
        }

        return aint1;
    }

    public static enum Mode
    {
        COOL_WARM,
        HEAT_ICE;
    }
}